(function(i,n){typeof exports=="object"&&typeof module<"u"?n(exports):typeof define=="function"&&define.amd?define(["exports"],n):(i=typeof globalThis<"u"?globalThis:i||self,n(i.CopyToClipboard={}))})(this,function(i){"use strict";class n extends HTMLElement{constructor(){super(),this.handleClick=this.handleClick.bind(this)}connectedCallback(){this.hasAttribute("disabled")||this.addEventListener("click",this.handleClick)}disconnectedCallback(){this.removeEventListener("click",this.handleClick)}getTemplate(){const t=this==null?void 0:this.querySelector("template"),e=this.getAttribute("target"),o=e?document.querySelector(e):null;return t||o}isTemplateElement(t){return"content"in t}async handleClick(){const t=this.getTemplate();if(t===null)return console.warn("The template tag or attribut target are not found"),!1;const e=this.isTemplateElement(t)?t==null?void 0:t.content.textContent:t.textContent;if(e){const o=this.hasAttribute("trim")?e==null?void 0:e.trim():e;navigator.clipboard.writeText(o).then(()=>{this.setAttribute("data-copy",""),this.dispatchCopyEvent()}).catch(s=>{this.hasAttribute("data-copy")&&this.removeAttribute("data-copy"),console.error(s.message)})}}dispatchCopyEvent(){const t=new CustomEvent("copytoclipboard:copy",{cancelable:!0});this.dispatchEvent(t)}}customElements.define("copyto-clipboard",n),i.CopyToClipboard=n,Object.defineProperty(i,Symbol.toStringTag,{value:"Module"})});
